package app

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func StartMenu(data *Storage) {
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Println("\nüìã –ú–µ–Ω—é:")
		fmt.Println("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã")
		fmt.Println("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		fmt.Println("3. –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ ID")
		fmt.Println("4. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("5. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
		fmt.Println("0. –í—ã–π—Ç–∏")

		fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)
		choice, err := strconv.Atoi(input)
		if err != nil {
			fmt.Println("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
			continue
		}

		switch choice {
		case 1:
			ShowOrders(data.Orders, data.Users)
		case 2:
			ShowUsers(data.Users)
		case 3:
			FindOrderByID(data.Orders, data.Users)
		case 4:
			AddUser(data)
		case 5:
			AddNewOrder(data.Orders, data.Users, data.Products)
		case 0:
			fmt.Println("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
			return
		default:
			fmt.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
		}
	}
}
