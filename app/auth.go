package app

import (
	"awesomeProject/user"
	"bufio"
	"fmt"
	"os"
	"strings"
)

var currentUser *user.User

// IsAuthenticated returns true if a user is currently logged in
func IsAuthenticated() bool {
	return currentUser != nil
}

// GetCurrentUser returns the currently logged-in user
func GetCurrentUser() *user.User {
	return currentUser
}

// Login prompts user for email and logs them in if found
func Login(storage *Storage) {
	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤—Ö–æ–¥–∞: ")
	email, _ := reader.ReadString('\n')
	email = strings.TrimSpace(email)

	// Find user by email
	for _, u := range storage.Users {
		if u.Email == email {
			currentUser = &u
			fmt.Printf("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n", u.Name)
			return
		}
	}

	fmt.Println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.")
}

// Logout logs out the current user
func Logout() {
	if currentUser != nil {
		fmt.Printf("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, %s!\n", currentUser.Name)
		currentUser = nil
	} else {
		fmt.Println("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
	}
}

// RequireAuth checks if user is authenticated and returns true if so
func RequireAuth() bool {
	if !IsAuthenticated() {
		fmt.Println("üîê –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
		return false
	}
	return true
}
