package app

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

// DeleteUser deletes a user by ID and removes all their orders
func DeleteUser(storage *Storage) {
	if !RequireAuth() {
		return
	}

	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
	idStr, _ := reader.ReadString('\n')
	idStr = strings.TrimSpace(idStr)
	userID, err := strconv.Atoi(idStr)
	if err != nil {
		fmt.Println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	// Find user index
	userIndex := -1
	for i, u := range storage.Users {
		if u.ID == userID {
			userIndex = i
			break
		}
	}

	if userIndex == -1 {
		fmt.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω.\n", userID)
		return
	}

	// Check if user has orders
	userOrders := []int{}
	for orderID, order := range storage.Orders {
		if order.UserID == userID {
			userOrders = append(userOrders, orderID)
		}
	}

	if len(userOrders) > 0 {
		fmt.Printf("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç %d –∑–∞–∫–∞–∑–æ–≤. –í—Å–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n", len(userOrders))
		fmt.Print("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
		confirm, _ := reader.ReadString('\n')
		confirm = strings.TrimSpace(strings.ToLower(confirm))
		if confirm != "y" && confirm != "yes" && confirm != "–¥–∞" {
			fmt.Println("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
			return
		}

		// Delete user's orders
		for _, orderID := range userOrders {
			delete(storage.Orders, orderID)
		}
	}

	// Remove user from slice
	storage.Users = append(storage.Users[:userIndex], storage.Users[userIndex+1:]...)

	fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n", userID)
	storage.AutoSave()
}

// DeleteOrder deletes an order by ID
func DeleteOrder(storage *Storage) {
	if !RequireAuth() {
		return
	}

	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
	idStr, _ := reader.ReadString('\n')
	idStr = strings.TrimSpace(idStr)
	orderID, err := strconv.Atoi(idStr)
	if err != nil {
		fmt.Println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
		return
	}

	// Check if order exists
	order, exists := storage.Orders[orderID]
	if !exists {
		fmt.Printf("‚ùå –ó–∞–∫–∞–∑ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω.\n", orderID)
		return
	}

	// Show order details before deletion
	fmt.Printf("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É #%d\n", orderID)
	fmt.Printf("–ö–ª–∏–µ–Ω—Ç: %s\n", GetUserNameByID(storage.Users, order.UserID))
	for _, p := range order.Products {
		fmt.Printf("  - %s: %.2f‚ÇΩ\n", p.Name, p.Price)
	}
	fmt.Printf("  –û–±—â–∞—è —Å—É–º–º–∞: %.2f‚ÇΩ\n", order.Total())

	fmt.Print("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑? (y/n): ")
	confirm, _ := reader.ReadString('\n')
	confirm = strings.TrimSpace(strings.ToLower(confirm))
	if confirm != "y" && confirm != "yes" && confirm != "–¥–∞" {
		fmt.Println("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
		return
	}

	// Delete order
	delete(storage.Orders, orderID)
	fmt.Printf("‚úÖ –ó–∞–∫–∞–∑ #%d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n", orderID)
	storage.AutoSave()
}
