package app

import (
	"awesomeProject/order"
	"awesomeProject/product"
	"awesomeProject/user"
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

// –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
func ShowOrders(orders map[int]*order.Order, users []user.User) {
	fmt.Println("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:")
	for id, o := range orders {
		fmt.Printf("–ó–∞–∫–∞–∑ #%d ‚Äî –∫–ª–∏–µ–Ω—Ç: %s\n", id, GetUserNameByID(users, o.UserID))
		for _, p := range o.Products {
			fmt.Printf("  - %s: %.2f‚ÇΩ\n", p.Name, p.Price)
		}
		fmt.Printf("  –û–±—â–∞—è —Å—É–º–º–∞: %.2f‚ÇΩ\n\n", o.Total())
	}
}

// –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func ShowUsers(users []user.User) {
	fmt.Println("üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
	for _, u := range users {
		fmt.Printf("ID: %d ‚Äî %s ‚Äî %s\n", u.ID, u.Name, u.Email)
	}
}

// –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ ID
func FindOrderByID(orders map[int]*order.Order, users []user.User) {
	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞: ")
	idStr, _ := reader.ReadString('\n')
	idStr = strings.TrimSpace(idStr)
	id, err := strconv.Atoi(idStr)
	if err != nil {
		fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
		return
	}

	order, exists := orders[id]
	if !exists {
		fmt.Printf("‚ùå –ó–∞–∫–∞–∑ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω.\n", id)
		return
	}

	fmt.Printf("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É #%d\n", id)
	fmt.Printf("–ö–ª–∏–µ–Ω—Ç: %s\n", GetUserNameByID(users, order.UserID))
	for _, p := range order.Products {
		fmt.Printf("  - %s: %.2f‚ÇΩ\n", p.Name, p.Price)
	}
	fmt.Printf("  –û–±—â–∞—è —Å—É–º–º–∞: %.2f‚ÇΩ\n", order.Total())
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func AddUser(data *Storage) {
	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
	name, _ := reader.ReadString('\n')
	name = strings.TrimSpace(name)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
	email, _ := reader.ReadString('\n')
	email = strings.TrimSpace(email)

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID
	newID := 1
	for _, u := range data.Users {
		if u.ID >= newID {
			newID = u.ID + 1
		}
	}

	newUser := user.New(newID, name, email)
	data.Users = append(data.Users, newUser)

	fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID %d\n", name, newID)
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
func AddNewOrder(orders map[int]*order.Order, users []user.User, products []product.Product) {
	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞: ")
	idStr, _ := reader.ReadString('\n')
	idStr = strings.TrimSpace(idStr)
	userID, err := strconv.Atoi(idStr)
	if err != nil {
		fmt.Println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var userExists bool
	for _, u := range users {
		if u.ID == userID {
			userExists = true
			break
		}
	}
	if !userExists {
		fmt.Println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	// –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
	fmt.Println("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
	for i, p := range products {
		fmt.Printf("%d. %s ‚Äî %.2f‚ÇΩ\n", i+1, p.Name, p.Price)
	}

	// –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3): ")
	input, _ := reader.ReadString('\n')
	input = strings.TrimSpace(input)
	ids := strings.Split(input, ",")

	var selectedProducts []product.Product
	for _, idStr := range ids {
		idStr = strings.TrimSpace(idStr)
		idx, err := strconv.Atoi(idStr)
		if err != nil || idx < 1 || idx > len(products) {
			fmt.Printf("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: %s\n", idStr)
			continue
		}
		selectedProducts = append(selectedProducts, products[idx-1])
	}

	if len(selectedProducts) == 0 {
		fmt.Println("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
		return
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
	newID := 1
	for id := range orders {
		if id >= newID {
			newID = id + 1
		}
	}

	newOrder := order.New(newID, userID, selectedProducts)
	orders[newID] = newOrder
	fmt.Printf("‚úÖ –ó–∞–∫–∞–∑ #%d —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d\n", newID, userID)
}
