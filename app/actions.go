package app

import (
	"awesomeProject/order"
	"awesomeProject/user"
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func ShowOrders(orders map[int]*order.Order, users []user.User) {
	fmt.Println("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:")
	for id, o := range orders {
		fmt.Printf("–ó–∞–∫–∞–∑ #%d ‚Äî –∫–ª–∏–µ–Ω—Ç: %s\n", id, GetUserNameByID(users, o.UserID))
		for _, p := range o.Products {
			fmt.Printf("  - %s: %.2f‚ÇΩ\n", p.Name, p.Price)
		}
		fmt.Printf("  –û–±—â–∞—è —Å—É–º–º–∞: %.2f‚ÇΩ\n\n", o.Total())
	}
}

func ShowUsers(users []user.User) {
	fmt.Println("üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
	for _, u := range users {
		fmt.Printf("ID: %d ‚Äî %s ‚Äî %s\n", u.ID, u.Name, u.Email)
	}
}
func FindOrderByID(orders map[int]*order.Order, users []user.User) {
	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞: ")
	idStr, _ := reader.ReadString('\n')
	idStr = strings.TrimSpace(idStr)
	id, err := strconv.Atoi(idStr)
	if err != nil {
		fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
		return
	}

	order, exists := orders[id]
	if !exists {
		fmt.Printf("‚ùå –ó–∞–∫–∞–∑ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω.\n", id)
		return
	}

	fmt.Printf("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É #%d\n", id)
	fmt.Printf("–ö–ª–∏–µ–Ω—Ç: %s\n", GetUserNameByID(users, order.UserID))
	for _, p := range order.Products {
		fmt.Printf("  - %s: %.2f‚ÇΩ\n", p.Name, p.Price)
	}
	fmt.Printf("  –û–±—â–∞—è —Å—É–º–º–∞: %.2f‚ÇΩ\n", order.Total())
}
